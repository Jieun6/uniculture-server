# 워크 플로우 이름
name: Java CI with Gradle 


# 워크 플로우가 언제 실행 될지를 정한다.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


# 워크 플로우가 깃 레포에 대한 권한을 읽기 만 가능하게 설정한다.
permissions:
  contents: read


# 워크플로우에서 할 작업 정의한다.
jobs:

  # 작업 환경 = 우분투 최신 버전
  build:
    runs-on: ubuntu-latest

    # 깃허브에서 제공하는 checkout 엑션 사용
    steps:
    - uses: actions/checkout@v3

    # JDK 17 설정한당
    # temurin = Adoptium에서 제공하는 JDK
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Install Gradle
      run: |
        sudo apt update
        sudo apt install -y gradle
        
    - name: Build with Gradle
      run: |
        gradle build

    # 빌드해서 생긴 JAR 파일을 깃허브 아티팩트로 업로드!!
    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: unicultureServer
        path: build/libs/

  # 배포 **
  deploy:
    needs: build
    runs-on: ubuntu-latest

    # 위의 빌드작업한 JAR 파일 = 아티팩트를 다운로드
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v2
      with:
        name: unicultureServer
        path: build/libs/

    # EC2에 배포
    # EC2 SSH 키를 private_key.pem 파일로 저장 ( 위치는 GitHub 서버 )
    # SCP를 사용하여 JAR 파일을 EC2 서버로 복사
    # SSH를 사용하여 EC2 서버에 연결하고 현재 실행 중인 Java 프로세스를 종료한 다음 새로운 Java 프로세스 생성 및 실행!!
    ## NLP 적용하면 IP -> 도메인으로 수정 + EC2 늘리면 run 추가
    - name: Deploy to EC2
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > mainkey2.pem
        chmod 400 mainkey2.pem
        scp -i mainkey2.pem -o StrictHostKeyChecking=no build/libs/unicultureServer-0.0.1-SNAPSHOT.jar ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/unicultureServer.jar
        ssh -i mainkey2.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "pgrep java | xargs kill -9; nohup java -jar /home/${{ secrets.EC2_USERNAME }}/unicultrueServer.jar > app.log 2>&1 &"
        rm -f mainkey2.pem
